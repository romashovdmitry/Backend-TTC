# Generated by Django 5.0.4 on 2024-07-07 10:49

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("club", "0002_initial"),
        ("user", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Tournament",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Created date, time",
                        null=True,
                        verbose_name="Created date, time",
                    ),
                ),
                (
                    "updated",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Update date, time",
                        null=True,
                        verbose_name="Created date, time",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Project use this field instead of full removing object from database. Just deactivate ",
                        verbose_name="Object is active of not",
                    ),
                ),
                ("name", models.CharField(max_length=128, null=True)),
                (
                    "date_time",
                    models.DateTimeField(
                        help_text="Date and Time of Tournament",
                        null=True,
                        verbose_name="Date and Time of Tournament",
                    ),
                ),
                (
                    "type",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "GROUP_KNOCK_OFF")],
                        default=0,
                        help_text="Tournament Type",
                        verbose_name="Tournament Type",
                    ),
                ),
                (
                    "group_number",
                    models.PositiveSmallIntegerField(
                        default=1,
                        help_text="Number of groups in tournament",
                        verbose_name="Number of groups in tournament",
                    ),
                ),
                (
                    "group_players_number",
                    models.PositiveSmallIntegerField(
                        default=5,
                        help_text="Number of players in one group",
                        verbose_name="Number of players in one group",
                    ),
                ),
                (
                    "group_qualifiers_number",
                    models.PositiveSmallIntegerField(
                        default=1,
                        help_text="Number of players who successfully left the group",
                        verbose_name="Number of players who successfully left the group",
                    ),
                ),
                (
                    "max_players_amount",
                    models.PositiveSmallIntegerField(
                        default=32,
                        help_text="Max amount of players, that could be registrated of tournament",
                        verbose_name="Max amount of players",
                    ),
                ),
                (
                    "min_rating_limit",
                    models.PositiveBigIntegerField(
                        default=100,
                        help_text="Players riched limit could be registrated.",
                        verbose_name="Minimal rating value for players",
                    ),
                ),
                (
                    "max_rating_limit",
                    models.PositiveBigIntegerField(
                        default=1000,
                        help_text="Players riched limit could not be registrated.",
                        verbose_name="Maximal rating value for players",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            (0, "CREATED"),
                            (1, "APPROVED"),
                            (2, "CONFIGURED"),
                            (3, "TOURNAMENT_STARTED"),
                            (4, "RUNING_NOW"),
                            (5, "FINISHED"),
                        ],
                        default=0,
                        help_text="Created, started, running or finished. ",
                        max_length=16,
                        null=True,
                        verbose_name="Tournament Status",
                    ),
                ),
                (
                    "player_pyament",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Player pay for participation in tournament",
                        null=True,
                        verbose_name="Participation payment",
                    ),
                ),
                (
                    "club",
                    models.ForeignKey(
                        help_text="Club where tournament run",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="tournament_club",
                        to="club.club",
                        verbose_name="Club where tournament run",
                    ),
                ),
                (
                    "tournament_admin",
                    models.ForeignKey(
                        help_text="Tournament Admin",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="tournament_admin",
                        to="user.tournamentadmin",
                        verbose_name="Tournament Admin",
                    ),
                ),
            ],
            options={
                "verbose_name": "Tournament",
                "verbose_name_plural": "Tournaments",
                "db_table": "tournaments",
            },
        ),
        migrations.CreateModel(
            name="TournamentPlayers",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Created date, time",
                        null=True,
                        verbose_name="Created date, time",
                    ),
                ),
                (
                    "updated",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Update date, time",
                        null=True,
                        verbose_name="Created date, time",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Project use this field instead of full removing object from database. Just deactivate ",
                        verbose_name="Object is active of not",
                    ),
                ),
                (
                    "player",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="user.player"
                    ),
                ),
                (
                    "tournament",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="tournament.tournament",
                    ),
                ),
            ],
            options={
                "verbose_name": "Tournament_Player",
                "verbose_name_plural": "Tournament_Players",
                "db_table": "tournament_players",
            },
        ),
    ]
